<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        select * from sys_user where id=#{id}
    </select>

  <!--  <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
    </select>-->

    <!--通过配置全局属性mapUnderscoreToCamelCase为true可以自动将下划线方式命名的数据库列映射到Java对象的驼峰式命名属性中,所以以上写法就可以改写成以下这种-->
    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name ,
        user_password ,
        user_email ,
        user_info ,
        head_img ,
        create_time
        from sys_user
    </select>

   <!-- <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
      SELECT
          r.id,
          r.role_name,
          r.enabled,
          r.create_by,
          r.create_time
      FROM sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id = #{userId}
    </select>-->
    <!--在上一个select的基础上扩展一下，如果返回的信息中不光有角色，还有用户信息，该如何接收，我们可以在SysRole中增加SysUser的属性，然后如下-->
    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        SELECT
        r.id,
        r.role_name,
        r.enabled,
        r.create_by,
        r.create_time,
        u.user_name as "user.userName",
        u.user_email as "user.userEmail"
        FROM sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id = #{userId}
    </select>

    <insert id="insert" >
        insert into sys_user(
           id,user_name,user_password,user_email,user_info,head_img,create_time
        ) VALUES (
          #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <!--这种获取主键的方式只适合数据库主键自增的数据库，对于采用序列方式的数据库，可以使用另一种方式selectKey-->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
        user_name,user_password,
            <if test="userEmail !=null and userEmail !=''">
             user_email,
            </if>
            user_info,head_img,create_time
        ) VALUES (
        #{userName},#{userPassword},
        <if test="userEmail !=null and userEmail !=''">
            #{userEmail},
        </if>
        #{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <!--selectKey方式不仅适用于主键是通过序列得到还适用于数据库主键自增-->
    <!--mysql中order为AFTER，因为当前记录的主键值在insert语句执行成功后才能获取到。-->
    <insert id="insert3" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
        user_name,user_password,user_email,user_info,head_img,create_time
        ) VALUES (
        #{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
        )
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!--selectKey方式不仅适用于主键是通过序列得到还适用于数据库主键自增-->
    <!--oracle中order为BEFORE，因为ORACLE中需要先从序列获取值，然后将值作为主键插入到数据库中-->
    <!--<insert id="insert3" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="BEFORE">
            select SEQ_ID.nextval from dual
        </selectKey>
        insert into sys_user(
        id,user_name,user_password,user_email,user_info,head_img,create_time
        ) VALUES (
        #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
        )
    </insert>-->

    <update id="updateById">
        update sys_user
        set user_name=#{userName},
            user_password=#{userPassword},
            user_email=#{userEmail},
            user_info=#{userInfo},
            head_img=#{headImg,jdbcType=BLOB},
            create_time=#{createTime,jdbcType=TIMESTAMP}
        where id=#{id}
    </update>

    <delete id="deleteById">
        delete from sys_user where id=#{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled"
            resultType="tk.mybatis.simple.model.SysRole">
        SELECT
            r.id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time
        FROM sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{userId} and r.enabled=#{enabled}
    </select>


    <select id="selectRolesByUserAndRole"
            resultType="tk.mybatis.simple.model.SysRole">
        SELECT
        r.id,
        r.role_name,
        r.enabled,
        r.create_by,
        r.create_time
        FROM sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{user.id} and r.enabled=#{role.enabled}
    </select>

    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        from sys_user
        <where>
            <if test="userName !=null and userName !=''">
                <!--and user_name like concat('%',#{userName},'%')-->
                <!--其上concat函数的用法可以用bind标签代替-->
                <bind name="userNameLike" value="'%' + userName + '%'"/>
                and user_name like #{userNameLike}
            </if>
            <if test="userEmail !=null and userEmail !=''">
                and user_email =#{userEmail}
            </if>
        </where>
    </select>



    <update id="updateByIdSelective">
        update sys_user
        <set>
            <if test="userName !=null and userName !=''">
               user_name = #{userName},
            </if>
            <if test="userPassword !=null and userPassword !=''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail !=null and userEmail !=''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo !=null and userInfo !=''">
                user_info = #{userInfo},
            </if>
            <if test="headImg !=null">
                head_img = #{headImg,jdbcType=BLOB},
            </if>
            <if test="createTime !=null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            id = #{id},
         </set>
        where id = #{id}
    </update>


    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        from sys_user
        where 1=1
        <choose>
            <when test="id !=null">
                and id = #{id}
            </when>
            <when test="userName!=null and userName!=''">
                and user_name =#{userName}
            </when>
            <otherwise>
                and 1=2
            </otherwise>
        </choose>
    </select>



    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        select id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        from sys_user
        where id IN
        <foreach collection="list" open="(" close=")" separator=","
                 item="id" index="i">
            #{id}
        </foreach>
    </select>


    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
             user_name,user_password,user_email,
             user_info,head_img,create_time)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName},#{user.userPassword},#{user.userEmail},
            #{user.userInfo},#{user.headImg,jdbcType=BLOB},
            #{user.createTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>


    <update id="updateByMap">
        update sys_user
        SET
            <foreach collection="_parameter" item="val" index="key" separator=",">
                ${key} = #{val}
            </foreach>
        where id = #{id}
    </update>


    <select id="selectUserAndRoleById"
        resultType="tk.mybatis.simple.model.SysUser">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id "sysRole.id",
            r.role_name "sysRole.roleName",
            r.enabled "sysRole.enabled",
            r.create_by "sysRole.createBy",
            r.create_time "sysRole.createTime"
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{id}
    </select>

    <resultMap id="userRoleMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id" />
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <!--role相关属性-->
        <result property="sysRole.id" column="role_id"/>
        <result property="sysRole.roleName" column="role_name"/>
        <result property="sysRole.enabled" column="enabled"/>
        <result property="sysRole.createBy" column="create_by"/>
        <result property="sysRole.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="selectUserAndRoleById2"
            resultMap="userRoleMap">
        SELECT
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.user_info,
        u.head_img,
        u.create_time,
        r.id "role_id",
        r.role_name ,
        r.enabled ,
        r.create_by ,
        r.create_time "role_create_time"
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{id}
    </select>

    <!---使用extends-->
    <resultMap id="userRoleMap2" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <result property="sysRole.id" column="role_id"/>
        <result property="sysRole.roleName" column="role_name"/>
        <result property="sysRole.enabled" column="enabled"/>
        <result property="sysRole.createBy" column="create_by"/>
        <result property="sysRole.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <!---使用association-->
    <resultMap id="userRoleMap3" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <association property="sysRole" columnPrefix="role_"
                     javaType="tk.mybatis.simple.model.SysRole">
            <result property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>

    <select id="selectUserAndRoleById3"
            resultMap="userRoleMap3">
        SELECT
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.user_info,
        u.head_img,
        u.create_time,
        r.id "role_id",
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time "role_create_time"
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{id}
    </select>

    <!--使用association配置属性resultMap-->
    <resultMap id="userRoleMap4" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <association property="sysRole" columnPrefix="role_"
                     resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap" />
    </resultMap>


    <!--association标签的嵌套查询-->
    <resultMap id="userRoleMapSelect" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <association property="sysRole" column="{id=role_id}" fetchType="lazy"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById" />
    </resultMap>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            ur.role_id
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        where u.id=#{id}
    </select>

    <!--一对多查询-->
    <resultMap id="userRoleListMap" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
       <collection property="roleList" columnPrefix="role_"
                   resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap" />
    </resultMap>


    <select id="selectAllUserAndRoles"
            resultMap="userRoleListMap">
        SELECT
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.user_info,
        u.head_img,
        u.create_time,
        r.id "role_id",
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time "role_create_time",
        p.id role_privilege_id,
        p.privilege_name role_privilege_privilege_name,
        p.privilege_url role_privilege_privilege_url
        from sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        inner join sys_role_privilege rp on rp.role_id=r.id
        inner join sys_privilege p on p.id=rp.privilege_id
    </select>

    <resultMap id="userRoleListMapSelect" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList"
                    fetchType="lazy"
                    select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time
        from sys_user u
        where u.id =#{id}
    </select>





































</mapper>